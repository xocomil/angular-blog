<script lang="ts">
  import { DOCUMENT } from '@angular/common';
  import { JsonPipe } from '@angular/common' with { analog: 'imports' };
  import { NgOptimizedImage } from '@angular/common' with { analog: 'imports' };
  import {
    afterNextRender,
    ApplicationRef,
    ChangeDetectorRef,
    computed,
    ElementRef,
    inject,
    input,
    signal,
  } from '@angular/core';
  import {
    takeUntilDestroyed,
    toObservable,
    toSignal,
  } from '@angular/core/rxjs-interop';
  import { debounceTime, fromEvent, switchMap, tap } from 'rxjs';
  import { DateTimeHelper } from '@angular-blog/dates';
  import { logObservable } from '@angular-blog/rxjs-operators';
  import { ArticlesService } from '../../services/articles.service';
  import ArticleTitle from './(index)/article-title.component.analog' with { analog:
    'imports' };
  import { MarkdownComponent } from '@analogjs/content' with { analog:
    'imports' };

  const articlesService = inject(ArticlesService);
  const dateTimeHelper = inject(DateTimeHelper);
  const document = inject(DOCUMENT);
  const applicationRef = inject(ApplicationRef);
  const elementRef = inject(ElementRef);
  const cdr = inject(ChangeDetectorRef);
  // const windowRef = document.defaultView;

  const imageHeight = signal('320px');

  const id = input.required<string>({ alias: 'articleId' });
  const article = toSignal(
    toObservable(id).pipe(
      switchMap((id) => articlesService.getArticle(id, [1536, 320])),
    ),
  );
  const articleImageUrl = computed(() => {
    const imageUrl = article()?.imageUrl;

    console.log('imageUrl', imageUrl);

    return imageUrl ?? 'test';
  });
  const byline = computed(() => {
    const byline = `${article()?.author} ${dateTimeHelper.toBlogArticleDate(article()?.date)}`;

    return byline ?? 'test';
  });

  const sizes = {
    small: 160,
    medium: 240,
    large: 320,
  } as const;

  type Sizes = keyof typeof sizes;

  let lastKnownScrollPosition = 0;
  let currentSize: Sizes = 'large';
  let ticking = false;
  const isSticky = signal(true);

  fromEvent(elementRef.nativeElement, 'scroll')
    .pipe(
      logObservable('scrollEvent'),
      takeUntilDestroyed(),
      logObservable('scroll after destroyed'),
    )
    .subscribe({
      next: (event: Event) => {
        console.log('subscribe scroll event', event);

        if (isScrollEvent(event)) {
          console.log('scroll event target', event.target);

          const currentPosition = event.target.scrollTop;

          const direction =
            currentPosition > lastKnownScrollPosition ? 'down' : 'up';

          lastKnownScrollPosition = currentPosition;
          if (!ticking) {
            setTimeout(() => {
              afterNextRender(() => {
                if (direction === 'down') {
                  if (currentSize !== 'small') {
                    if (currentSize === 'large') {
                      currentSize = 'medium';
                    } else {
                      currentSize = 'small';
                      isSticky.set(false);
                    }

                    imageHeight.set(`${sizes[currentSize]}px`);

                    elementRef.nativeElement.scrollTop = 0;
                  }
                }

                ticking = false;
              });
            }, 250);

            ticking = true;
          }
        }
      },
      complete: () => {
        console.log('subscribe scroll complete');
      },
    });

  type ScrollEvent = { type: 'scroll'; target: HTMLElement };

  function isScrollEvent(event: { type: string }): event is ScrollEvent {
    return event.type === 'scroll';
  }
</script>

<template
  class="grid overflow-y-auto max-h-full"
  [style.--height]="imageHeight()"
>
  <div class="title flex justify-center">
    <ArticleTitle [title]="article()?.title" [byline]="byline()" />
  </div>
  <div
    class="image image-transition"
    [class.sticky]="isSticky()"
    [class.top-0]="isSticky()"
  >
    <img
      class="w-full h-full object-cover"
      [ngSrc]="articleImageUrl()"
      width="1536"
      height="320"
      priority="true"
    />
  </div>
  <div class="content">
    @if (article()?.content) {
      <analog-markdown [content]="article()?.content" />
    } @else {
      <h3>Article not found!</h3>
    }
  </div>
</template>

<style>
  :host {
    --height-change-duration: 0.5s;

    grid-template-columns: [left-edge] 2em [left-bleed] 1fr [right-bleed] 2em [right-edge];
    grid-template-rows: max-content min-content 1fr;
    gap: 1em 1em;
    grid-template-areas:
      'image image image'
      '. title .'
      '. content .';

    .image {
      view-transition-name: image-transition;
      transition: height var(--height-change-duration) ease-in-out;
      height: var(--height);
      grid-area: image;
      background: theme(colors.secondary / 5%);
    }

    .title {
      grid-area: title;
    }

    .content {
      grid-area: content;
    }
  }
</style>
